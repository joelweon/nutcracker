<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="nutcracker.dao.UserDao">
  <resultMap type="user" id="user-map">
    <id       column="mno"       property="memberNo"/>
    <result   column="email"     property="email"/>
    <result   column="name"      property="name"/>
    <result   column="pwd"       property="password"/>
    <result   column="lst_date"  property="lastDate"/>
    <result   column="path"      property="photoPath"/>
    <result   column="b_day"     property="birthday"/>
    <result   column="tel"       property="tel"/>
    <result   column="zip"       property="postcode"/>
    <result   column="bas_adr"   property="basicAddress"/>
    <result   column="det_adr"   property="detailAddress"/>
    <result   column="job"       property="job"/>
    <result   column="gen"       property="gender"/>
    <result   column="out_type"  property="outType"/>
    <result   column="out_cont"  property="outContent"/>
    <result   column="join_date" property="joinDate"/>
  </resultMap>
  
  <select id="getList" resultMap="user-map">
    select 
      m.mno,
      u.b_day,
      u.tel,
      u.zip,
      u.bas_adr,
      u.det_adr,
      u.job,
      u.gen,
      m.join_date
    from user u 
      left outer join memb m on u.uno=m.mno
  </select>
  
  <select id="getOneByEmailPassword" parameterType="map" resultMap="user-map">
    select 
      m.mno,
      m.email,
      m.name,
      m.pwd,
      m.path,
      u.tel,
      u.zip,
      u.bas_adr,
      u.det_adr,
      u.join_date,
      u.job,
      m.lst_date,
      u.out_type,
      u.out_cont
    from user u
      left outer join memb m on u.uno = m.mno
    where m.email=#{email} 
      and m.pwd=password(#{password})
  </select>
  
  <select id="getOneByNo" parameterType="map" resultMap="user-map">
    select 
      m.mno,
      m.email,
      m.name,
      m.pwd,
      m.path,
      u.tel,
      u.zip,
      u.bas_adr,
      u.det_adr,
      u.join_date,
      u.job,
      m.lst_date,
      u.out_type,
      u.out_cont
    from user u
      left outer join memb m on u.uno = m.mno
    where m.mno=#{memberNo}
  </select>
  
  <select id="countByNo" parameterType="int" resultType="int">
    select count(*)
    from user u
      left outer join memb m on u.uno=m.mno
    where u.uno=#{value}
  </select>
  
  <select id="countByEmail" parameterType="String" resultType="int">
    select count(*)
    from user u
      left outer join memb m on u.uno=m.mno
    where m.email=#{value}
  </select>
  
  <insert id="insert" parameterType="user">
    insert into user(uno,b_day,tel,zip,bas_adr,det_adr,job,gen,out_type,join_date)
    values(
      #{memberNo},
      #{birthday},
      #{tel},
      #{postcode},
      #{basicAddress},
      #{detailAddress},
      #{job},
      #{gender},
      0,
      now()
    )
  </insert>
  
  <update id="update" parameterType="user">
    update user u 
    left outer join memb m on u.uno=m.mno
    set
      m.email=#{email},
      m.pwd=password(#{password}),
      m.name=#{name},
      u.tel=#{tel},
      u.zip=#{postcode},
      u.bas_adr=#{basicAddress},
      u.det_adr=#{detailAddress},
      u.job=#{job},
      m.lst_date=now()
    where uno=#{memberNo}
  </update>
  
  <update id="updateAddress" parameterType="user">
    update user set
      zip=#{postcode},
      bas_adr=#{basicAddress},
      det_adr=#{detailAddress}
    where uno=#{memberNo}
  </update>
  
  <delete id="delete" parameterType="int">
    <![CDATA[
      delete from user where uno=#{value}
    ]]>
  </delete>
  
  <select id="countReportMember" resultType="int">
    select count(*) 
    from (select m.mno
    from memb m
      left outer join review r on m.mno=r.mno
      left outer join cmt c on m.mno=c.mno
    where r.rep_cnt > 0 or c.rep_cnt > 0
    group by m.mno) as a
  </select>
  
  <select id="listReportMember" parameterType="map" resultType="map">
		select r.mno, sum(r.rep_cnt) as sr, sum(c.rep_cnt) as sc
		  from memb m 
		left outer join review r on m.mno=r.mno
		left outer join cmt c on m.mno=c.mno  
		group by r.mno
    having ifnull(sr,0) + ifnull(sc,0) > 3
    limit #{startRowIndex}, #{rowSize}
  </select>
  
  <select id="detailReportMember" parameterType="int" resultType="map">
    select 
      m.mno,
      m.name,
      m.email,
      date_format(u.join_date,'%Y-%m-%d') as join_date,
      date_format(m.lst_date,'%Y-%m-%d %T') as lst_date,
      u.out_type,
      sum(ifnull((select sum(rep_cnt) from cmt where cmt.mno=#{memberNo}), 0)
      + ifnull((select sum(rep_cnt) from review where review.mno=#{memberNo}), 0)) as rep_cnt
    from user u 
      left outer join memb m on u.uno=m.mno
    where m.mno=#{memberNo}
  </select>
  
  <update id="updateStatus" parameterType="user">
    update user set
      out_type=#{outType}
    where uno=#{memberNo}
  </update>

</mapper>